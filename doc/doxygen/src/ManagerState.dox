/*!
 * @page stable_resolution Stable Entity Resolution
 *
 * @section stable_resolution_overview Overview
 * One of the main design principles of the @ref ManagerInterface is
 * that it should be stateless, in the sense that any session state is
 * held by the caller and supplied to the manager as part of the method
 * signature. This is to allow multi-threaded access to the @ref ManagerInterface
 * and avoid the need for any additional internal state to exist within
 * its implementation. The @ref openassetio.hostApi.Manager "Manager"
 * class wraps the interface implementation to help the @ref host
 * with basic session state management.
 *
 * Many common use cases require multiple calls to the API to complete a
 * task. Several textures need to be published together, or multiple
 * frames of a render need to be distributed to a render-farm.
 *
 * If a manager wants to support the concept of a @ref meta_version, it
 * becomes essential that there is some way for the manager to know that
 * disparate calls to the API are part of the same conceptual action, so
 * that the resolution of references is stable.
 *
 * To achieve this, we introduce the idea of a @ref
 * manager_state token.
 *
 * @note Generating a state token is optional for the manager. However,
 * without one, it is not possible to know if any two API calls are
 * being made from a related process.
 *
 * @section stable_resolution_manager_state Manager State
 *
 * The manager state mechanism allows a @ref manager to embed state
 * within the @ref host, such that it can correlate API calls.
 *
 * Whenever a @ref Context is created by the host, the
 * @fqref{managerApi.ManagerInterface.createState}
 * "ManagerInterface.createState" (or
 * @fqref{managerApi.ManagerInterface.createChildState}
 * "ManagerInterface.createChildState") method will be called, and the
 * returned token stored in the Context's @fqref{Context.managerState}
 * "managerState" property.
 *
 * @startuml
 * actor host
 * host -> Manager : createContext()
 * Manager -> ManagerInterface : createState(hostSession)
 * ManagerInterface -> ManagerInterface : __createSnapshotToken()
 * ManagerInterface --> Manager : token
 * Manager -> Manager : new Context()
 * Manager -> Manager : context.managerState = token
 * Manager --> host : context
 * ...
 * host -> Manager : register(..., context)
 * Manager -> ManagerInterface : register(..., context, hostSession)
 * ManagerInterface -> ManagerInterface : state = context.managerState
 * ...
 * @enduml
 *
 * @warning The host must treat the token as being opaque, and is solely
 * responsible for managing the lifetime of each Context such that it is
 * re-used for logically correlated series of actions. The API
 * middleware takes care of requesting and persisting the state token.
 *
 * @section stable_resolution_manager_state_distribution Distributed Processing
 *
 * Distributed processing requires the same context to be shared by
 * multiple discrete working processes.
 *
 * The @fqref{hostApi.Manager.persistenceTokenForContext}
 * "Manager.persistenceTokenForContext" and
 * @fqref{hostApi.Manager.contextFromPersistenceToken}
 * "contextFromPersistenceToken" methods provide a mechanism by which a
 * @ref host can obtain a portable version of the manager's state token
 * for a given context for distribution to other processes that are
 * logically connected.
 *
 * @startuml
 * actor user
 * actor scheduler
 * actor worker
 * user -> scheduler : submit("a_job.script")
 * scheduler --> user :
 * ...
 * == preflight task ==
 * scheduler -> worker : someApp a_job.script ~--preflight --stateFile openassetio.json
 * activate worker
 * activate Manager
 * worker -> Manager : createContext()
 * Manager --> worker : context
 * worker -> worker : context.access = context.kWrite
 * worker -> Manager : working_reference = preflight(["ref://asset"], context)[0]
 * Manager --> worker : "ref://asset=v4&state=inflight"
 * worker -> Manager : persistenceTokenForContext(context)
 * Manager --> worker : token
 * worker -> worker : write_state_file(token, {"ref://asset": working_entity_reference})
 * worker --> scheduler
 * deactivate Manager
 * deactivate worker
 * ...
 * == processing tasks ==
 * group distribute to n
 *     scheduler -> worker : someApp a_job.script ~--run ~--frame n --stateFile openassetio.json
 *     activate worker
 *     activate Manager
 *     worker -> worker : token, ref_map = read_state_file("openassetio.json")
 *     worker -> Manager : contextFromPersistenceToken(token)
 *     Manager --> worker : context
 *     worker -> worker : context.access = context.kWrite
 *     worker -> worker : working_reference = ref_map["ref://asset"]
 *     worker -> Manager : [spec] = resolve([working_reference], {FileTrait.id}, context)
 *     Manager --> worker : Specification({"file": {"url": "file:///out.####.exr"}})
 *     worker -> worker : write_data(FileTrait(spec).url())
 *     worker --> scheduler
 *     deactivate Manager
 *     deactivate worker
 * end
 * ...
 * == register task ==
 * scheduler -> worker : someApp a_job.script ~--register --stateFile openassetio.json
 * activate worker
 * activate Manager
 * worker -> worker : token, ref_map = read_state_file("openassetio.json")
 * worker -> Manager : contextFromPersistenceToken(token)
 * Manager --> worker : context
 * worker -> worker : context.access = context.kWrite
 * worker -> worker : working_reference = ref_map["ref://asset"]
 * worker -> Manager : path = resolve([working_reference], FileTrait.id, context)[0]
 * Manager --> worker : "file://out.####.exr"
 * worker -> Manager : final_reference = register([working_reference], [path], context)[0]
 * Manager --> worker : "ref://asset=v4"
 * worker -> worker : update_state_file({"ref://asset": final_reference})
 * worker --> scheduler
 * deactivate Manager
 * deactivate worker
 * @enduml
 *
 * @note The above diagram omits the interaction between the Manager and
 * ManagerInterface classes for readability. Right-click to open in a
 * larger view.
 *
 * This mechanism allows for distributed API calls to be anchored to
 * specific snapshot of a manager's view of the world. It is not
 * intended to be used to group discrete publishing actions into a
 * batch. This (may be) covered (in the future) by a separate
 * transaction API.
 *
 * The reason for this is that a host may need to perform multiple
 * independent transactions during the lifetime of a single context.
 *
 * @section stable_resolution_manager_state_guidelines Implementation Guidelines
 *
 * - Because a state restored from a persistence token may be passed to
 *   multiple child processes, the manager must be prepared for the
 *   state to be restored more than once, at the same time.
 */
